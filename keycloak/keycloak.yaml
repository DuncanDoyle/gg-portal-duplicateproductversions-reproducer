apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: keycloak
  type: ClusterIP
  # type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:26.0.1
        args: ["start-dev"]
        # args: ["start-dev", "--import-realm"]
        env:
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: KEYCLOAK_ADMIN
              name: keycloak-secrets
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: KEYCLOAK_ADMIN_PASSWORD
              name: keycloak-secrets
        - name: KC_PROXY
          value: "edge"
        # - name: KC_LOG_LEVEL
        #   value: DEBUG
        # - name: KC_HEALTH_ENABLED
        #   value: "true"
        # - name: KC_METRICS_ENABLED
        #   value: "true"
        # - name: KC_HOSTNAME_STRICT_HTTPS
        #   value: "true"
        # - name: KC_LOG_LEVEL
        #   value: INFO
        - name: KC_DB
          value: postgres
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB
        - name: KC_DB_URL
          value: jdbc:postgresql://postgres/$(POSTGRES_DB)
        - name: KC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        ports:
        - name: http
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
        # readinessProbe:
        #   httpGet:
        #     path: /health/ready
        #     port: 8080
        #   initialDelaySeconds: 250
        #   periodSeconds: 10
        # livenessProbe:
        #   httpGet:
        #     path: /health/live
        #     port: 8080
        #   initialDelaySeconds: 500
        #   periodSeconds: 30
        resources:
            limits:
              # ddoyle: Higher memory limit is need to allow us to use the 'kc.sh' tool to export realms when needed (otherwise container crashes due to memory limits with a 137).
              memory: 1Gi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
      # # ddoyle: Needed if we want to import realms on startup       
      #   volumeMounts:
      #   - name: realms
      #     mountPath: /opt/keycloak/data/import
      # volumes:
      # - name: realms
      #   configMap:
      #     name: realms
